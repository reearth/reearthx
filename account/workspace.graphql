type Workspace implements Node {
    id: ID!
    name: String!
    alias: String
    members: [WorkspaceMember!]!
    metadata: WorkspaceMetadata!
    personal: Boolean!
}

union WorkspaceMember = WorkspaceUserMember | WorkspaceIntegrationMember

type WorkspaceUserMember {
    userId: ID!
    role: Role!
    host: String
    user: User
}

type WorkspaceIntegrationMember {
    integrationId: ID!
    role: Role!
    active: Boolean!
    invitedById: ID!
    invitedBy: User
}

type WorkspaceMetadata {
    description: String
    website: String
    location: String
    billingEmail: String
    photoURL: String
}

enum Role {
    # a role who can read project
    READER
    # a role who can read and write project
    WRITER
    # a eole who can have full control of project
    OWNER
    # a eole who can maintain a project
    MAINTAINER
}

input CreateWorkspaceInput {
    name: String!
    alias: String
}

input UpdateWorkspaceInput {
    workspaceId: ID!
    name: String!
    alias: String
}

input MemberInput {
    userId: ID!
    role: Role!
}

input AddUsersToWorkspaceInput {
    workspaceId: ID!
    users: [MemberInput!]!
}

input AddIntegrationToWorkspaceInput {
    workspaceId: ID!
    integrationId: ID!
    role: Role!
}

input RemoveUserFromWorkspaceInput {
    workspaceId: ID!
    userId: ID!
}

input RemoveMultipleUsersFromWorkspaceInput {
    workspaceId: ID!
    userIds: [ID!]!
}

input RemoveIntegrationFromWorkspaceInput {
    workspaceId: ID!
    integrationId: ID!
}


input RemoveIntegrationsFromWorkspaceInput {
    workspaceId: ID!
    integrationIds: [ID!]!
}

input UpdateUserOfWorkspaceInput {
    workspaceId: ID!
    userId: ID!
    role: Role!
}

input UpdateIntegrationOfWorkspaceInput {
    workspaceId: ID!
    integrationId: ID!
    role: Role!
}

input DeleteWorkspaceInput {
    workspaceId: ID!
}

# extend type Query { }

type CreateWorkspacePayload {
    workspace: Workspace!
}

type UpdateWorkspacePayload {
    workspace: Workspace!
}

type AddUsersToWorkspacePayload {
    workspace: Workspace!
}

type RemoveMemberFromWorkspacePayload {
    workspace: Workspace!
}

type RemoveIntegrationsFromWorkspacePayload {
    workspace: Workspace!
}

type RemoveMultipleMembersFromWorkspacePayload {
    workspace: Workspace!
}

type UpdateMemberOfWorkspacePayload {
    workspace: Workspace!
}

type DeleteWorkspacePayload {
    workspaceId: ID!
}

extend type Query {
  findByUser(userId: ID!): [Workspace]
}

extend type Mutation {
    createWorkspace(input: CreateWorkspaceInput!): CreateWorkspacePayload
    deleteWorkspace(input: DeleteWorkspaceInput!): DeleteWorkspacePayload
    updateWorkspace(input: UpdateWorkspaceInput!): UpdateWorkspacePayload
    addUsersToWorkspace(input: AddUsersToWorkspaceInput!): AddUsersToWorkspacePayload
    addIntegrationToWorkspace(input: AddIntegrationToWorkspaceInput!): AddUsersToWorkspacePayload
    removeUserFromWorkspace(input: RemoveUserFromWorkspaceInput!): RemoveMemberFromWorkspacePayload
    removeMultipleUsersFromWorkspace(input: RemoveMultipleUsersFromWorkspaceInput!): RemoveMultipleMembersFromWorkspacePayload
    removeIntegrationFromWorkspace(input: RemoveIntegrationFromWorkspaceInput!): RemoveMemberFromWorkspacePayload
    removeIntegrationsFromWorkspace(input: RemoveIntegrationsFromWorkspaceInput!): RemoveIntegrationsFromWorkspacePayload
    updateUserOfWorkspace(input: UpdateUserOfWorkspaceInput!): UpdateMemberOfWorkspacePayload
    updateIntegrationOfWorkspace(input: UpdateIntegrationOfWorkspaceInput!): UpdateMemberOfWorkspacePayload
}
