// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AssetConnection struct {
	Nodes      []*Asset  `json:"nodes"`
	TotalCount int       `json:"totalCount"`
	PageInfo   *PageInfo `json:"pageInfo"`
}

type AssetFilter struct {
	Keyword *string `json:"keyword,omitempty"`
}

type AssetSort struct {
	By        AssetSortType `json:"by"`
	Direction SortDirection `json:"direction"`
}

type AssignPolicyInput struct {
	GroupID  string  `json:"groupId"`
	PolicyID *string `json:"policyId,omitempty"`
}

type AssignPolicyPayload struct {
	Group *Group `json:"group"`
}

type CreateAssetPayload struct {
	Asset *Asset `json:"asset"`
}

type CreateAssetUploadInput struct {
	GroupID         string  `json:"groupId"`
	FileName        string  `json:"fileName"`
	ContentLength   int     `json:"contentLength"`
	ContentEncoding *string `json:"contentEncoding,omitempty"`
	Cursor          *string `json:"cursor,omitempty"`
}

type CreateAssetUploadPayload struct {
	Token           string  `json:"token"`
	URL             string  `json:"url"`
	ContentType     string  `json:"contentType"`
	ContentLength   int     `json:"contentLength"`
	ContentEncoding *string `json:"contentEncoding,omitempty"`
	Next            *string `json:"next,omitempty"`
}

type CreateGroupInput struct {
	Name string `json:"name"`
}

type CreateGroupPayload struct {
	Group *Group `json:"group"`
}

type CreatePolicyInput struct {
	Name         string `json:"name"`
	StorageLimit int    `json:"storageLimit"`
}

type CreatePolicyPayload struct {
	Policy *Policy `json:"policy"`
}

type DecompressAssetInput struct {
	ID string `json:"id"`
}

type DecompressAssetPayload struct {
	Asset *Asset `json:"asset"`
}

type DeleteAssetInput struct {
	ID string `json:"id"`
}

type DeleteAssetPayload struct {
	AssetID string `json:"assetId"`
}

type DeleteAssetsInput struct {
	Ids []string `json:"ids"`
}

type DeleteAssetsPayload struct {
	AssetIds []string `json:"assetIds"`
}

type DeleteGroupInput struct {
	ID string `json:"id"`
}

type DeleteGroupPayload struct {
	GroupID string `json:"groupId"`
}

type DeletePolicyInput struct {
	ID string `json:"id"`
}

type DeletePolicyPayload struct {
	PolicyID string `json:"policyId"`
}

type Mutation struct {
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Pagination struct {
	Offset int `json:"offset"`
	Limit  int `json:"limit"`
}

type Query struct {
}

type UpdateAssetPayload struct {
	Asset *Asset `json:"asset"`
}

type AssetSortType string

const (
	AssetSortTypeDate AssetSortType = "DATE"
	AssetSortTypeSize AssetSortType = "SIZE"
	AssetSortTypeName AssetSortType = "NAME"
)

var AllAssetSortType = []AssetSortType{
	AssetSortTypeDate,
	AssetSortTypeSize,
	AssetSortTypeName,
}

func (e AssetSortType) IsValid() bool {
	switch e {
	case AssetSortTypeDate, AssetSortTypeSize, AssetSortTypeName:
		return true
	}
	return false
}

func (e AssetSortType) String() string {
	return string(e)
}

func (e *AssetSortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AssetSortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AssetSortType", str)
	}
	return nil
}

func (e AssetSortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
