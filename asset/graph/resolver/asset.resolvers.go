package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/reearth/reearthx/asset/graph/generated"
	"github.com/reearth/reearthx/asset/graph/model"
)

// CreateAsset is the resolver for the createAsset field.
func (r *mutationResolver) CreateAsset(ctx context.Context, input model.CreateAssetInput) (*model.CreateAssetPayload, error) {
	panic(fmt.Errorf("not implemented: CreateAsset - createAsset"))
}

// UpdateAsset is the resolver for the updateAsset field.
func (r *mutationResolver) UpdateAsset(ctx context.Context, input model.UpdateAssetInput) (*model.UpdateAssetPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateAsset - updateAsset"))
}

// DeleteAsset is the resolver for the deleteAsset field.
func (r *mutationResolver) DeleteAsset(ctx context.Context, input model.DeleteAssetInput) (*model.DeleteAssetPayload, error) {
	panic(fmt.Errorf("not implemented: DeleteAsset - deleteAsset"))
}

// DeleteAssets is the resolver for the deleteAssets field.
func (r *mutationResolver) DeleteAssets(ctx context.Context, input model.DeleteAssetsInput) (*model.DeleteAssetsPayload, error) {
	panic(fmt.Errorf("not implemented: DeleteAssets - deleteAssets"))
}

// DecompressAsset is the resolver for the decompressAsset field.
func (r *mutationResolver) DecompressAsset(ctx context.Context, input model.DecompressAssetInput) (*model.DecompressAssetPayload, error) {
	panic(fmt.Errorf("not implemented: DecompressAsset - decompressAsset"))
}

// CreateAssetUpload is the resolver for the createAssetUpload field.
func (r *mutationResolver) CreateAssetUpload(ctx context.Context, input model.CreateAssetUploadInput) (*model.CreateAssetUploadPayload, error) {
	panic(fmt.Errorf("not implemented: CreateAssetUpload - createAssetUpload"))
}

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, input model.CreateGroupInput) (*model.CreateGroupPayload, error) {
	panic(fmt.Errorf("not implemented: CreateGroup - createGroup"))
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, input model.DeleteGroupInput) (*model.DeleteGroupPayload, error) {
	panic(fmt.Errorf("not implemented: DeleteGroup - deleteGroup"))
}

// AssignPolicy is the resolver for the assignPolicy field.
func (r *mutationResolver) AssignPolicy(ctx context.Context, input model.AssignPolicyInput) (*model.AssignPolicyPayload, error) {
	panic(fmt.Errorf("not implemented: AssignPolicy - assignPolicy"))
}

// CreatePolicy is the resolver for the createPolicy field.
func (r *mutationResolver) CreatePolicy(ctx context.Context, input model.CreatePolicyInput) (*model.CreatePolicyPayload, error) {
	panic(fmt.Errorf("not implemented: CreatePolicy - createPolicy"))
}

// DeletePolicy is the resolver for the deletePolicy field.
func (r *mutationResolver) DeletePolicy(ctx context.Context, input model.DeletePolicyInput) (*model.DeletePolicyPayload, error) {
	panic(fmt.Errorf("not implemented: DeletePolicy - deletePolicy"))
}

// Asset is the resolver for the asset field.
func (r *queryResolver) Asset(ctx context.Context, id string) (*model.Asset, error) {
	panic(fmt.Errorf("not implemented: Asset - asset"))
}

// AssetFile is the resolver for the assetFile field.
func (r *queryResolver) AssetFile(ctx context.Context, assetID string) (*model.AssetFile, error) {
	panic(fmt.Errorf("not implemented: AssetFile - assetFile"))
}

// Assets is the resolver for the assets field.
func (r *queryResolver) Assets(ctx context.Context, groupID string, filter *model.AssetFilter, sort *model.AssetSort, pagination model.Pagination) (*model.AssetConnection, error) {
	panic(fmt.Errorf("not implemented: Assets - assets"))
}

// Group is the resolver for the group field.
func (r *queryResolver) Group(ctx context.Context, id string) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: Group - group"))
}

// Policy is the resolver for the policy field.
func (r *queryResolver) Policy(ctx context.Context, id string) (*model.Policy, error) {
	panic(fmt.Errorf("not implemented: Policy - policy"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
