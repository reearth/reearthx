type Asset implements Node {
  id: ID!
  group: Group!
  groupId: ID!
  createdAt: DateTime!
  createdById: ID!
  size: Int!
  contentType: String!
  contentEncoding: String
  previewType: PreviewType
  uuid: String!
  url: String!
  fileName: String!
  archiveExtractionStatus: ArchiveExtractionStatus
  integration: Integration!
}

enum PreviewType {
  IMAGE
  IMAGE_SVG
  GEO
  GEO_3D_TILES
  GEO_MVT
  MODEL_3D
  CSV
  UNKNOWN
}

enum ArchiveExtractionStatus {
  SKIPPED
  PENDING
  IN_PROGRESS
  DONE
  FAILED
}


type File struct {
	name        string
	size        uint64
	contentType string
	path        string
	children    []*File
	files       []*File
}

type Group implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  policy: Policy
}

type Policy implements Node {
  id: ID!
  name: String!
  storageLimit: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AssetFilter {
  keyword: String
}

enum AssetSortType {
  DATE
  SIZE
  NAME
}

enum SortDirection {
  ASC
  DESC
}

input AssetSort {
  by: AssetSortType!
  direction: SortDirection!
}

input Pagination {
  offset: Int!
  limit: Int!
}

type AssetConnection {
  nodes: [Asset!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input CreateAssetInput {
  groupId: ID!
  file: Upload
  url: String
  token: String
  skipDecompression: Boolean
  contentEncoding: String
}

type CreateAssetPayload {
  asset: Asset!
}

input UpdateAssetInput {
  id: ID!
  previewType: PreviewType
}

type UpdateAssetPayload {
  asset: Asset!
}

input DeleteAssetInput {
  id: ID!
}

type DeleteAssetPayload {
  assetId: ID!
}

input DeleteAssetsInput {
  ids: [ID!]!
}

type DeleteAssetsPayload {
  assetIds: [ID!]!
}

input DecompressAssetInput {
  id: ID!
}

type DecompressAssetPayload {
  asset: Asset!
}

input CreateAssetUploadInput {
  groupId: ID!
  fileName: String!
  contentLength: Int!
  contentEncoding: String
  cursor: String
}

type CreateAssetUploadPayload {
  token: String!
  url: String!
  contentType: String!
  contentLength: Int!
  contentEncoding: String
  next: String
}

input CreateGroupInput {
  name: String!
}

type CreateGroupPayload {
  group: Group!
}

input DeleteGroupInput {
  id: ID!
}

type DeleteGroupPayload {
  groupId: ID!
}

input AssignPolicyInput {
  groupId: ID!
  policyId: ID
}

type AssignPolicyPayload {
  group: Group!
}

input CreatePolicyInput {
  name: String!
  storageLimit: Int!
}

type CreatePolicyPayload {
  policy: Policy!
}

input DeletePolicyInput {
  id: ID!
}

type DeletePolicyPayload {
  policyId: ID!
}

type Query {
  asset(id: ID!): Asset
  assetFile(assetId: ID!): AssetFile!
  assets(groupId: ID!, filter: AssetFilter, sort: AssetSort, pagination: Pagination!): AssetConnection!
  group(id: ID!): Group
  policy(id: ID!): Policy
}

type Mutation {
  createAsset(input: CreateAssetInput!): CreateAssetPayload
  updateAsset(input: UpdateAssetInput!): UpdateAssetPayload
  deleteAsset(input: DeleteAssetInput!): DeleteAssetPayload
  deleteAssets(input: DeleteAssetsInput!): DeleteAssetsPayload
  decompressAsset(input: DecompressAssetInput!): DecompressAssetPayload
  createAssetUpload(input: CreateAssetUploadInput!): CreateAssetUploadPayload
  
  createGroup(input: CreateGroupInput!): CreateGroupPayload
  deleteGroup(input: DeleteGroupInput!): DeleteGroupPayload
  assignPolicy(input: AssignPolicyInput!): AssignPolicyPayload
  
  createPolicy(input: CreatePolicyInput!): CreatePolicyPayload
  deletePolicy(input: DeletePolicyInput!): DeletePolicyPayload
}

# File upload scalar definition
scalar Upload

# DateTime scalar for time values
scalar DateTime

interface Node {
  id: ID!
} 