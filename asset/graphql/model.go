// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type Asset struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Size        int         `json:"size"`
	ContentType string      `json:"contentType"`
	URL         *string     `json:"url,omitempty"`
	Status      AssetStatus `json:"status"`
	Error       *string     `json:"error,omitempty"`
	CreatedAt   time.Time   `json:"createdAt"`
	UpdatedAt   time.Time   `json:"updatedAt"`
}

type DeleteAssetInput struct {
	ID string `json:"id"`
}

type DeleteAssetPayload struct {
	AssetID string `json:"assetId"`
}

type DeleteAssetsInput struct {
	Ids []string `json:"ids"`
}

type DeleteAssetsPayload struct {
	AssetIds []string `json:"assetIds"`
}

type GetAssetUploadURLInput struct {
	ID string `json:"id"`
}

type GetAssetUploadURLPayload struct {
	UploadURL string `json:"uploadURL"`
}

type MoveAssetInput struct {
	ID            string  `json:"id"`
	ToWorkspaceID *string `json:"toWorkspaceId,omitempty"`
	ToProjectID   *string `json:"toProjectId,omitempty"`
}

type MoveAssetPayload struct {
	Asset *Asset `json:"asset"`
}

type Mutation struct {
}

type Query struct {
}

type UpdateAssetMetadataInput struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Size        int    `json:"size"`
	ContentType string `json:"contentType"`
}

type UpdateAssetMetadataPayload struct {
	Asset *Asset `json:"asset"`
}

type UploadAssetInput struct {
	ID   string         `json:"id"`
	File graphql.Upload `json:"file"`
}

type UploadAssetPayload struct {
	Asset *Asset `json:"asset"`
}

type AssetStatus string

const (
	AssetStatusPending    AssetStatus = "PENDING"
	AssetStatusActive     AssetStatus = "ACTIVE"
	AssetStatusExtracting AssetStatus = "EXTRACTING"
	AssetStatusError      AssetStatus = "ERROR"
)

var AllAssetStatus = []AssetStatus{
	AssetStatusPending,
	AssetStatusActive,
	AssetStatusExtracting,
	AssetStatusError,
}

func (e AssetStatus) IsValid() bool {
	switch e {
	case AssetStatusPending, AssetStatusActive, AssetStatusExtracting, AssetStatusError:
		return true
	}
	return false
}

func (e AssetStatus) String() string {
	return string(e)
}

func (e *AssetStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AssetStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AssetStatus", str)
	}
	return nil
}

func (e AssetStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
