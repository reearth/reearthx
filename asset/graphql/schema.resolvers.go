package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"

	"github.com/reearth/reearthx/asset/domain/entity"
	"github.com/reearth/reearthx/asset/domain/id"
)

// UploadAsset is the resolver for the uploadAsset field.
func (r *mutationResolver) UploadAsset(ctx context.Context, input UploadAssetInput) (*UploadAssetPayload, error) {
	assetID, err := id.From(input.ID)
	if err != nil {
		return nil, err
	}

	// Create asset metadata
	asset := entity.NewAsset(
		assetID,
		input.File.Filename,
		input.File.Size,
		input.File.ContentType,
	)

	// Create asset metadata first
	result := r.assetUsecase.CreateAsset(ctx, asset)
	if !result.IsSuccess() {
		return nil, result
	}

	// Upload file content
	result = r.assetUsecase.UploadAssetContent(ctx, assetID, FileFromUpload(&input.File))
	if !result.IsSuccess() {
		return nil, result
	}

	// Update asset status to active
	asset.UpdateStatus(entity.StatusActive, "")
	result = r.assetUsecase.UpdateAsset(ctx, asset)
	if !result.IsSuccess() {
		return nil, result
	}

	return &UploadAssetPayload{
		Asset: AssetFromDomain(asset),
	}, nil
}

// GetAssetUploadURL is the resolver for the getAssetUploadURL field.
func (r *mutationResolver) GetAssetUploadURL(ctx context.Context, input GetAssetUploadURLInput) (*GetAssetUploadURLPayload, error) {
	assetID, err := id.From(input.ID)
	if err != nil {
		return nil, err
	}

	result := r.assetUsecase.GetAssetUploadURL(ctx, assetID)
	if !result.IsSuccess() {
		return nil, result
	}

	return &GetAssetUploadURLPayload{
		UploadURL: result.Data.(string),
	}, nil
}

// UpdateAssetMetadata is the resolver for the updateAssetMetadata field.
func (r *mutationResolver) UpdateAssetMetadata(ctx context.Context, input UpdateAssetMetadataInput) (*UpdateAssetMetadataPayload, error) {
	assetID, err := id.From(input.ID)
	if err != nil {
		return nil, err
	}

	result := r.assetUsecase.GetAsset(ctx, assetID)
	if !result.IsSuccess() {
		return nil, result
	}
	asset := result.Data.(*entity.Asset)

	asset.UpdateMetadata(input.Name, "", input.ContentType)
	asset.SetSize(int64(input.Size))
	result = r.assetUsecase.UpdateAsset(ctx, asset)
	if !result.IsSuccess() {
		return nil, result
	}

	return &UpdateAssetMetadataPayload{
		Asset: AssetFromDomain(asset),
	}, nil
}

// DeleteAsset is the resolver for the deleteAsset field.
func (r *mutationResolver) DeleteAsset(ctx context.Context, input DeleteAssetInput) (*DeleteAssetPayload, error) {
	assetID, err := id.From(input.ID)
	if err != nil {
		return nil, err
	}

	result := r.assetUsecase.DeleteAsset(ctx, assetID)
	if !result.IsSuccess() {
		return nil, result
	}

	return &DeleteAssetPayload{
		AssetID: input.ID,
	}, nil
}

// DeleteAssets is the resolver for the deleteAssets field.
func (r *mutationResolver) DeleteAssets(ctx context.Context, input DeleteAssetsInput) (*DeleteAssetsPayload, error) {
	var assetIDs []id.ID
	for _, idStr := range input.Ids {
		assetID, err := id.From(idStr)
		if err != nil {
			return nil, err
		}
		assetIDs = append(assetIDs, assetID)
	}

	for _, assetID := range assetIDs {
		result := r.assetUsecase.DeleteAsset(ctx, assetID)
		if !result.IsSuccess() {
			return nil, result
		}
	}

	return &DeleteAssetsPayload{
		AssetIds: input.Ids,
	}, nil
}

// MoveAsset is the resolver for the moveAsset field.
func (r *mutationResolver) MoveAsset(ctx context.Context, input MoveAssetInput) (*MoveAssetPayload, error) {
	assetID, err := id.From(input.ID)
	if err != nil {
		return nil, err
	}

	result := r.assetUsecase.GetAsset(ctx, assetID)
	if !result.IsSuccess() {
		return nil, result
	}
	asset := result.Data.(*entity.Asset)

	if input.ToWorkspaceID != nil {
		wsID, err := id.WorkspaceIDFrom(*input.ToWorkspaceID)
		if err != nil {
			return nil, err
		}
		asset.MoveToWorkspace(wsID)
	}

	if input.ToProjectID != nil {
		projID, err := id.ProjectIDFrom(*input.ToProjectID)
		if err != nil {
			return nil, err
		}
		asset.MoveToProject(projID)
	}

	result = r.assetUsecase.UpdateAsset(ctx, asset)
	if !result.IsSuccess() {
		return nil, result
	}

	return &MoveAssetPayload{
		Asset: AssetFromDomain(asset),
	}, nil
}

// DeleteAssetsInGroup is the resolver for the deleteAssetsInGroup field.
func (r *mutationResolver) DeleteAssetsInGroup(ctx context.Context, input DeleteAssetsInGroupInput) (*DeleteAssetsInGroupPayload, error) {
	groupID, err := id.GroupIDFrom(input.GroupID)
	if err != nil {
		return nil, err
	}

	result := r.assetUsecase.DeleteAllAssetsInGroup(ctx, groupID)
	if !result.IsSuccess() {
		return nil, result
	}

	return &DeleteAssetsInGroupPayload{
		GroupID: input.GroupID,
	}, nil
}

// Asset is the resolver for the asset field.
func (r *queryResolver) Asset(ctx context.Context, assetID string) (*Asset, error) {
	aid, err := id.From(assetID)
	if err != nil {
		return nil, err
	}

	result := r.assetUsecase.GetAsset(ctx, aid)
	if !result.IsSuccess() {
		return nil, result
	}

	return AssetFromDomain(result.Data.(*entity.Asset)), nil
}

// Assets is the resolver for the assets field.
func (r *queryResolver) Assets(ctx context.Context) ([]*Asset, error) {
	result := r.assetUsecase.ListAssets(ctx)
	if !result.IsSuccess() {
		return nil, result
	}

	assets := result.Data.([]*entity.Asset)
	graphqlAssets := make([]*Asset, len(assets))
	for i, asset := range assets {
		graphqlAssets[i] = AssetFromDomain(asset)
	}

	return graphqlAssets, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
