package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/reearth/reearthx/asset/domain"
)

// UploadAsset is the resolver for the uploadAsset field.
func (r *mutationResolver) UploadAsset(ctx context.Context, input UploadAssetInput) (*UploadAssetPayload, error) {
	id, err := domain.IDFrom(input.ID)
	if err != nil {
		return nil, err
	}

	// Create asset metadata
	asset := domain.NewAsset(
		id,
		input.File.Filename,
		input.File.Size,
		input.File.ContentType,
	)

	// Create asset metadata first
	if err := r.assetService.Create(ctx, asset); err != nil {
		return nil, err
	}

	// Upload file content
	if err := r.assetService.Upload(ctx, id, FileFromUpload(&input.File)); err != nil {
		return nil, err
	}

	// Update asset status to active
	asset.UpdateStatus(domain.StatusActive, "")
	if err := r.assetService.Update(ctx, asset); err != nil {
		return nil, err
	}

	return &UploadAssetPayload{
		Asset: AssetFromDomain(asset),
	}, nil
}

// GetAssetUploadURL is the resolver for the getAssetUploadURL field.
func (r *mutationResolver) GetAssetUploadURL(ctx context.Context, input GetAssetUploadURLInput) (*GetAssetUploadURLPayload, error) {
	id, err := domain.IDFrom(input.ID)
	if err != nil {
		return nil, err
	}

	// Create empty asset metadata first
	asset := domain.NewAsset(
		id,
		"", // Name will be updated after upload
		0,  // Size will be updated after upload
		"", // ContentType will be updated after upload
	)

	if err := r.assetService.Create(ctx, asset); err != nil {
		return nil, err
	}

	// Generate signed URL
	url, err := r.assetService.GetUploadURL(ctx, id)
	if err != nil {
		return nil, err
	}

	return &GetAssetUploadURLPayload{
		UploadURL: url,
	}, nil
}

// UpdateAssetMetadata is the resolver for the updateAssetMetadata field.
func (r *mutationResolver) UpdateAssetMetadata(ctx context.Context, input UpdateAssetMetadataInput) (*UpdateAssetMetadataPayload, error) {
	id, err := domain.IDFrom(input.ID)
	if err != nil {
		return nil, err
	}

	// Get existing asset
	asset, err := r.assetService.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	// Update metadata
	asset.UpdateMetadata(input.Name, "", input.ContentType)
	asset.UpdateStatus(domain.StatusActive, "")

	if err := r.assetService.Update(ctx, asset); err != nil {
		return nil, err
	}

	return &UpdateAssetMetadataPayload{
		Asset: AssetFromDomain(asset),
	}, nil
}

// DeleteAsset is the resolver for the deleteAsset field.
func (r *mutationResolver) DeleteAsset(ctx context.Context, input DeleteAssetInput) (*DeleteAssetPayload, error) {
	panic(fmt.Errorf("not implemented: DeleteAsset - deleteAsset"))
}

// DeleteAssets is the resolver for the deleteAssets field.
func (r *mutationResolver) DeleteAssets(ctx context.Context, input DeleteAssetsInput) (*DeleteAssetsPayload, error) {
	panic(fmt.Errorf("not implemented: DeleteAssets - deleteAssets"))
}

// MoveAsset is the resolver for the moveAsset field.
func (r *mutationResolver) MoveAsset(ctx context.Context, input MoveAssetInput) (*MoveAssetPayload, error) {
	panic(fmt.Errorf("not implemented: MoveAsset - moveAsset"))
}

// Asset is the resolver for the asset field.
func (r *queryResolver) Asset(ctx context.Context, id string) (*Asset, error) {
	panic(fmt.Errorf("not implemented: Asset - asset"))
}

// Assets is the resolver for the assets field.
func (r *queryResolver) Assets(ctx context.Context) ([]*Asset, error) {
	panic(fmt.Errorf("not implemented: Assets - assets"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
